@startuml
'https://plantuml.com/sequence-diagram



activate ":Duke"
create ":Storage"
":Duke" -> ":Storage" : Storage()
activate ":Storage"
":Storage" -> ":Storage" : initialiseDatabase()
activate ":Storage"
create ":ArrayList<Module>"
":Storage" -> ":ArrayList<Module>" : new ArrayList<>()
activate ":ArrayList<Module>"
":Storage" <-- ":ArrayList<Module>" : modules:ArrayList<Module>
deactivate ":ArrayList<Module>"
create ":File"
":Storage" -> ":File" : File(SAVED_MODULES_FILE_PATH)
activate ":File"
":Storage" <-- ":File" : savedModulesFile
deactivate ":File"

opt !savedModulesFile.exists()
create ":File"
":Storage" -> ":File" : File("data")
activate ":File"
":Storage" <-- ":File" : directory
deactivate ":File"
":Storage" -> ":File" : directory.mkdirs()
activate ":File"
deactivate ":File"
end
":Storage" -> ":Storage" : readModData(SAVED_MODULES_FILE_PATH, modules)
activate ":Storage"
ref over ":Storage" : readModData
":Storage" --> ":Storage"
deactivate ":Storage"
":Storage" -> ":Storage" : checkDatabaseCorrupted()
activate ":Storage"
":Storage" --> ":Storage" : isStorageCorrupted:boolean
deactivate ":Storage"
opt isStorageCorrupted == true
":Storage" -> "<<class>>\n:UI" : UI.printStorageCorruptedMessage()
activate "<<class>>\n:UI"
":Storage" <-- "<<class>>\n:UI"
deactivate "<<class>>\n:UI"
end
":Storage" -> ":Storage" : writeModListToFile(modules)
activate ":Storage"
":Storage" --> ":Storage"
deactivate ":Storage"
":Storage" --> ":Storage"
deactivate ":Storage"
":Storage" --> ":Duke"
deactivate ":Storage"


@enduml